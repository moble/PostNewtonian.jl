"""
    inspiral(M‚ÇÅ, M‚ÇÇ, œá‚Éó‚ÇÅ, œá‚Éó‚ÇÇ, Œ©·µ¢; kwargs...)

Integrate the orbital dynamics of an inspiraling non-eccentric compact binary.


## Required arguments

  * `M‚ÇÅ`: Initial mass of black hole 1
  * `M‚ÇÇ`: Initial mass of black hole 2
  * `œá‚Éó‚ÇÅ`: Initial dimensionless spin of black hole 1, S‚Éó‚ÇÅ/M‚ÇÅ¬≤
  * `œá‚Éó‚ÇÇ`: Initial dimensionless spin of black hole 2, S‚Éó‚ÇÇ/M‚ÇÇ¬≤
  * `Œ©·µ¢`: Initial orbital angular frequency

These parameters all describe the "initial" conditions.  See below for an explanation of the
different meanings of "initial" and "first" in this context.  Note that the masses change in
time as a result of tidal heating ‚Äî though the changes are quite small throughout most of
the inspiral.  The spins change direction due to precession, but also change in magnitude
due to tidal heating.  Therefore, the values passed here are only precisely as given
*precisely at* the moment of the initial data corresponding to the frequency `Œ©·µ¢`.


## Keyword arguments

  * `Œ©‚ÇÅ=Œ©·µ¢`: First angular frequency in output data (see next section).
  * `Œ©‚Çë=1`: Final angular frequency at which to stop ODE integration.
  * `R·µ¢=Rotor(1)`: Initial orientation of binary.
  * `expansion="TaylorT1"`: Currently the only possibility.
  * `PNOrder=4//1`: Order to which to retain powers of ``v^2`` in PN expansions.
  * `check_up_down_instability=true`: Warn if the "up-down instability" (see below) is
    likely to affect this system.
  * `time_stepper=AutoVern9(Rodas5())`: Choice of solver in OrdinaryDiffEq to integrate ODE.
  * `abstol=eps(T)^(11//16)`: Absolute tolerance of ODE solver, where `T` is the common type
    to which all the positional arguments are promoted.  This is the tolerance on local
    error estimates, not necessarily the global error.
  * `reltol=eps(T)^(11//16)`: Relative tolerance of ODE solver.  (As above.)
  * `termination_criteria_forwards=nothing`: Callbacks to use for forwards-in-time
    evolution.  See below for discussion of the default value.
  * `termination_criteria_backwards=nothing`: Callbacks to use for backwards-in-time
    evolution.  See below for discussion of the default value.
  * `force_dtmin=true`: If `dt` decreases below the integrator's own minimum, and this is
    false, the integrator will immediately raise an error, before the termination criteria
    have the chance to exit gracefully.  Note that a true value here is critical if the
    `dtmin_terminator` callback is to have any effect.
  * `quiet=false`: If set to `true`, informational messages about successful terminations of
    the ODE integrations (which occur when the target ``v`` is reached in either direction)
    will be silenced.  Warnings will still be issued when terminating for other reasons; if
    you wish to silence them too, you should do something like
    ```julia
    using Logging
    with_logger(SimpleLogger(Logging.Error)) do
        <your code goes here>
    end
    ```
  * `integrate_orbital_phase=false`: If set to `true`, integrate the orbital phase ``Œ¶``
    along with the rest of the system.  Note that this may slow the system down because the
    absolute value of ``Œ¶`` may grow to very large values, so that the `abstol` will strain
    to keep its evolution far more accurate than is really needed.  If this is a problem,
    you can loosen `abstol` and/or pass vectors of separate tolerances for each variable in
    the ODE system (see below).

All remaining keyword arguments are passed to the [`solve`
function](https://github.com/SciML/DiffEqBase.jl/blob/8e6173029c630f6908252f3fc28a69c1f0eab456/src/solve.jl#L393)
of `DiffEqBase`.  See that function's documentation for details, including useful keyword
arguments.  The most likely important ones are

  * `saveat`: Denotes specific times to save the solution at, during the solving phase ‚Äî
    either a time step or a vector of specific times.
  * `dt`: Sets the *initial* stepsize. Defaults to an automatic choice if the method is
    adaptive.
  * `dtmax`: Maximum dt for adaptive timestepping.
  * `dtmin`: Minimum dt for adaptive timestepping.

Note that if you want the solution to be output with specifically spaced time steps, you
*don't* want `dt`, which is just the initial suggestion for adaptive systems; you want to
set `saveat` to the desired spacing.

Also note that `callback` can be used, and is combined with the callbacks generated by the
`termination_criteria_*` arguments above.  See [the
documentation](https://diffeq.sciml.ai/dev/features/callback_functions/) for more details,
but note that if you want to make your own callbacks, you will need to add `OrdinaryDiffEq`
to your project ‚Äî or possibly even `DifferentialEquations` for some of the fancier built-in
callbacks.


## ODE system

The evolved variables, in order, are

  * `M‚ÇÅ`: Mass of black hole 1
  * `M‚ÇÇ`: Mass of black hole 2
  * `œá‚Éó‚ÇÅÀ£`: ``x`` component of dimensionless spin of black hole 1
  * `œá‚Éó‚ÇÅ ∏`: ``y`` component...
  * `œá‚Éó‚ÇÅ·∂ª`: ``z`` component...
  * `œá‚Éó‚ÇÇÀ£`: ``x`` component of dimensionless spin of black hole 2
  * `œá‚Éó‚ÇÇ ∏`: ``y`` component...
  * `œá‚Éó‚ÇÇ·∂ª`: ``z`` component...
  * `R ∑`: Scalar component of frame rotor
  * `RÀ£`: ``x`` component...
  * `R ∏`: ``y`` component...
  * `R·∂ª`: ``z`` component...
  * `v`: PN "velocity" parameter related to the total mass ``M`` and orbital angular
    frequency ``Œ©`` by ``v = (M Œ©)^{1/3}``
  * `Œ¶`: Orbital phase given by integrating ``Œ©`` (optional; only appears if
    `integrate_orbital_phase` is `true`)

The masses and spin magnitudes evolve according to [`tidal_heating`](@ref).  The spin
directions evolve according to [`Œ©‚Éó·µ™‚ÇÅ`](@ref) and [`Œ©‚Éó·µ™‚ÇÇ`](@ref).  The frame rotor ``R`` is
given by integrating the angular velocity as described in [Boyle
(2016)](https://arxiv.org/abs/1604.08139), while the angular velocity itself is given by
[`Œ©‚Éó‚Çö`](@ref).  And finally, the PN parameter ``v`` evolves according to something like
```math
\\dot{v} = - \\frac{\\mathcal{F} + \\dot{M}_1 + \\dot{M}_2} {\\mathcal{E}'}
```
where [`ùìï`](@ref) is the flux of gravitational-wave energy out of the system,
``\\dot{M}_1`` and ``\\dot{M}_2`` are due to tidal coupling as computed by
[`tidal_heating`](@ref), and [`ùìî‚Ä≤`](@ref) is the derivative of the binding energy with
respect to ``v``.  For `"TaylorT1"`, the right-hand side of this equation is evaluated as
given; for `"TaylorT4"`, the right-hand side is first expanded as a Taylor series in ``v``
and then truncated at some desired order; for `"TaylorT5"`, the *inverse* of the right-hand
side is expanded as a Taylor series in ``v``, truncated at some desired order, and then
inverted to obtain an expression in terms of ``v``.


## Returned solution

The returned quantity is an [`ODESolution`](https://diffeq.sciml.ai/dev/basics/solution/)
object, which has various features for extracting and interpolating the data.  We'll call
this object `sol`.

!!! note

    The solution comes with data at the time points the ODE integrator happened
    to step to.  However, it *also* comes with dense output (unless you
    manually turn it off when calling `inspiral`).  This means that you can
    interpolate the solution to any other set of time points you want simply by
    calling it as `sol(t)` for some vector of time points `t`.  The quantity
    returned by that will have the following features, just like the original
    solution.  Note that if you only want some of the data you can provide the
    optional keyword argument `idxs` to specify which of the elements described
    below you want to interpolate.  For example, if you only want to
    interpolate the values of `M‚ÇÅ` and `M‚ÇÇ`, you can use `sol(t, idxs=[1,2])`.

The field `sol.t` is the set of time points at which the solution is given.  To access the
`i`th variable at time step `j`, use `sol[i, j]`.[^1] You can also use colons.  For example,
`sol[:, j]` is a vector of all the data at time step `j`, and `sol[i, :]` is a vector of the
`i`th variable at all times.

[^1]: Here, the `i`th variable just refers to which number it has in the list of evolved
      variables in the ODE system, as described under "ODE system".


## Initial frequency vs. first frequency vs. end frequency

Note the distinction between `Œ©·µ¢` (with subscript `i`) and `Œ©‚ÇÅ` (with subscript `1`).  The
first, `Œ©·µ¢`, represents the angular frequency of the *initial condition* from which the ODE
integrator will begin; the second, `Œ©‚ÇÅ`, represents the target angular frequency of the
first element of the output data.  That is, the ODE integration will run forwards in time
from `Œ©·µ¢` to the merger, and then ‚Äî if `Œ©·µ¢>Œ©‚ÇÅ` ‚Äî come back to `Œ©·µ¢` and run backwards in time
to `Œ©‚ÇÅ`.  The output data will stitch these two together to be one continuous
(forwards-in-time) data series.

For example, if you are trying to match to a numerical relativity (NR) simulation, you can
read the masses and spins off of the NR data when the system is orbiting at angular
frequency `Œ©·µ¢`.  Integrating the post-Newtonian (PN) solution forwards in time from this
point will allow you to compare the PN and NR waveforms.  However, you may want to know what
the waveform was at *earlier* times than are present in the NR data.  For this, you also
have to integrate backwards in time.  We parameterize the point to which you integrate
backwards with `Œ©‚ÇÅ`.  In either case, element `1` of the output solution will have frequency
`Œ©‚ÇÅ` ‚Äî though by default it is equal to `Œ©·µ¢`.

Similarly, the optional argument `Œ©‚Çë=1` is the frequency of the `end` element of the
solution ‚Äî that is Julia's notation for the last element.  Note that this is automatically
reduced if necessary so that the corresponding PN parameter ``v`` is no greater than 1,
which may be the case whenever the total mass is greater than 1.


## Up-down instability

Be aware that the [up-down instability](http://arxiv.org/abs/1506.09116) (where the more
massive black hole has spin aligned with the orbital angular velocity, and the less massive
has spin anti-aligned) can cause systems with nearly zero precession at the initial time to
evolve into a highly precessing system either at earlier or later times.  This is a real
physical result, rather than a numerical issue.  If you want to simulate a truly
non-precessing system, you should explicitly set the in-place components of spin to
precisely 0.  By default, we check for this condition, and will issue a warning if it is
likely to be encountered for systems with low initial precession.  The function used to
compute the unstable region is [`up_down_instability`](@ref).


## Time-stepper algorithms

`Tsit5()` is a good default choice for time stepper when using `Float64` with medium-low
tolerance.  If stiffness seems to be impacting the results, `AutoTsit5(Rosenbrock23())` will
automatically switch when stiffness occurs.  For tighter tolerances, especially when using
`Double64`s, `Vern9()` or `AutoVern9(Rodas5())` are good choices.  For very loose
tolerances, as when using `Float32`s, it might be better to use `OwrenZen3()`.


## Termination criteria

The termination criteria are vital to efficiency of the integration and correctness of the
solution.  The default values for forwards- and backwards-in-time evolution, respectively,
are
```julia
CallbackSet(
    termination_forwards(v(Œ©=Œ©‚Çë, M=M‚ÇÅ+M‚ÇÇ)),
    dtmin_terminator(T),
    nonfinite_terminator()
)
```
and
```julia
CallbackSet(
    termination_backwards(v(Œ©=Œ©‚ÇÅ, M=M‚ÇÅ+M‚ÇÇ)),
    dtmin_terminator(T),
    nonfinite_terminator()
)
```
where `T` is the common float type of the input arguments.  If any additional termination
criteria are needed, they could be added as additional elements of the `CallbackSet`s.  See
the [callback documentation](https://diffeq.sciml.ai/stable/features/callback_functions/)
for details.

"""
function inspiral(
    M‚ÇÅ, M‚ÇÇ, œá‚Éó‚ÇÅ, œá‚Éó‚ÇÇ, Œ©·µ¢;
    integrate_orbital_phase=false, Œª‚ÇÅ=0, Œª‚ÇÇ=0,
    Œ©‚ÇÅ=Œ©·µ¢, Œ©‚Çë=1, R·µ¢=Rotor(true),
    expansion="TaylorT1", PNOrder=4//1,
    check_up_down_instability=true, time_stepper=AutoVern9(Rodas5()),
    reltol=nothing, abstol=nothing,
    termination_criteria_forwards=nothing,
    termination_criteria_backwards=nothing,
    quiet=false, force_dtmin=true,
    solve_kwargs...
)
    # Sanity checks for the inputs

    if M‚ÇÅ ‚â§ 0 || M‚ÇÇ ‚â§ 0
        error("Unphysical masses: M‚ÇÅ=$M‚ÇÅ, M‚ÇÇ=$M‚ÇÇ.")
    end

    œá‚Éó‚ÇÅ, œá‚Éó‚ÇÇ = QuatVec(œá‚Éó‚ÇÅ), QuatVec(œá‚Éó‚ÇÇ)
    if abs2vec(œá‚Éó‚ÇÅ) > 1 || abs2vec(œá‚Éó‚ÇÇ) > 1
        error(
            "Unphysical spins: |œá‚Éó‚ÇÅ|=$(abs2vec(œá‚Éó‚ÇÅ)), |œá‚Éó‚ÇÇ|=$(abs2vec(œá‚Éó‚ÇÇ)).\n"
            *"These are dimensionless spins, which should be less than 1.\n"
            *"Perhaps you forgot to divide by M‚ÇÅ¬≤ or M‚ÇÇ¬≤, respectively."
        )
    end

    R·µ¢ = Rotor(R·µ¢)

    v·µ¢ = v(Œ©=Œ©·µ¢, M=M‚ÇÅ+M‚ÇÇ)
    if v·µ¢ ‚â• 1
        error(
            "The input Œ©·µ¢=$Œ©·µ¢ is too large; with these masses, it corresponds to\n"
            * "v·µ¢=$v·µ¢, which is beyond the reach of post-Newtonian methods."
        )
    end

    if !iszero(Œª‚ÇÅ) && iszero(Œª‚ÇÇ)
        error(
            "By convention, the NS in a BHNS binary must be the second body,\n"
            *"meaning that Œª‚ÇÅ should be zero, and only Œª‚ÇÇ should be nonzero.\n"
            *"You may want to swap the masses, spins, and Œª parameters.\n"
            *"Alternatively, both can be nonzero, resulting in an NSNS binary."
        )
    end

    if Œ©‚ÇÅ > Œ©·µ¢
        error(
            "Initial frequency Œ©·µ¢=$Œ©·µ¢ should be greater than "
            * "or equal to first frequency Œ©‚ÇÅ=$Œ©‚ÇÅ."
        )
    end

    if Œ©·µ¢ > Œ©‚Çë
        error(
            "Initial frequency Œ©·µ¢=$Œ©·µ¢ should be less than "
            * "or equal to ending frequency Œ©‚Çë=$Œ©‚Çë."
        )
    end

    v‚ÇÅ = v(Œ©=Œ©‚ÇÅ, M=M‚ÇÅ+M‚ÇÇ)
    v‚Çë = min(v(Œ©=Œ©‚Çë, M=M‚ÇÅ+M‚ÇÇ), 1)
    Œ¶ = integrate_orbital_phase ? 0 : nothing

    # Initial conditions for the ODE integration
    pnsystem = let R=R·µ¢, v=v·µ¢
        if !iszero(Œª‚ÇÅ) && !iszero(Œª‚ÇÇ)
            NSNS(;M‚ÇÅ, M‚ÇÇ, œá‚Éó‚ÇÅ, œá‚Éó‚ÇÇ, R, v, Œª‚ÇÅ, Œª‚ÇÇ, Œ¶, PNOrder)
        elseif !iszero(Œª‚ÇÇ)
            BHNS(;M‚ÇÅ, M‚ÇÇ, œá‚Éó‚ÇÅ, œá‚Éó‚ÇÇ, R, v, Œª‚ÇÇ, Œ¶, PNOrder)
        else
            BBH(;M‚ÇÅ, M‚ÇÇ, œá‚Éó‚ÇÅ, œá‚Éó‚ÇÇ, R, v, Œ¶, PNOrder)
        end
    end

    if check_up_down_instability
        up_down_instability_warn(pnsystem, v‚ÇÅ, v‚Çë)
    end

    # The choice of 11//16 here is just an easy way to get an idea that for Float64 this
    # will give us around 11 digits of accuracy, and a similar fraction of the precision for
    # other types.
    T = eltype(pnsystem)
    if isnothing(reltol)
        reltol = eps(T)^(11//16)
    end
    if isnothing(abstol)
        abstol = eps(T)^(11//16)
    end

    if isnothing(termination_criteria_forwards)
        termination_criteria_forwards = CallbackSet(
            termination_forwards(v‚Çë, quiet),
            dtmin_terminator(T),
            nonfinite_terminator()
        )
    end

    if isnothing(termination_criteria_backwards)
        termination_criteria_backwards = CallbackSet(
            termination_backwards(v‚ÇÅ, quiet),
            dtmin_terminator(T),
            nonfinite_terminator()
        )
    end

    RHS! = if expansion=="TaylorT1"
        TaylorT1!
    elseif expansion=="TaylorT4"
        error("TaylorT4 has not yet been implemented")
    elseif expansion=="TaylorT5"
        error("TaylorT5 has not yet been implemented")
    else
        error("""Unknown expansion type "$expansion".""")
    end

    # Log an error if the initial parameters return a NaN on the right-hand side
    let
        u·µ¢ = pnsystem.state
        uÃá = similar(u·µ¢)
        t·µ¢ = zero(T)
        RHS!(uÃá, u·µ¢, pnsystem, t·µ¢)
        if any(isnan, uÃá) ||  any(isnan, u·µ¢)
            # COV_EXCL_START
            @error "Found a NaN with initial parameters:" value.(u·µ¢) value.(uÃá) pnsystem
            error("Found NaN")
            # COV_EXCL_STOP
        end
    end

    inspiral(
        pnsystem, Œ©‚ÇÅ, Œ©‚Çë, v‚ÇÅ, v‚Çë,
        time_stepper, reltol, abstol,
        termination_criteria_forwards,
        termination_criteria_backwards,
        force_dtmin, RHS!;
        solve_kwargs...
    )
end


function inspiral(
    pnsystem, Œ©‚ÇÅ, Œ©‚Çë, v‚ÇÅ, v‚Çë,
    time_stepper, reltol, abstol,
    termination_criteria_forwards,
    termination_criteria_backwards,
    force_dtmin, RHS!;
    solve_kwargs...
)
    pn‚ÇÅ = deepcopy(pnsystem)
    œÑ = estimated_time_to_merger(pnsystem)

    # Note: This estimate for the time span over which to integrate may be very bad,
    # especially close to merger.  An underestimate would lead to an inspiral ending too
    # soon, but an overestimate can lead to integration continuing very slowly in a regime
    # where PN has broken down.
    problem_forwards = ODEProblem(
        RHS!, pnsystem.state, (zero(œÑ), 4œÑ), pnsystem,
        callback=termination_criteria_forwards
    )

    solution_forwards = solve(
        problem_forwards, time_stepper;
        reltol, abstol, force_dtmin,
        solve_kwargs...
    )

    if v‚ÇÅ < v(pn‚ÇÅ)
        # Reset state to initial conditions
        pnsystem.state[:] .= pn‚ÇÅ.state

        pn‚ÇÅ.state[13] = v‚ÇÅ
        œÑ = estimated_time_to_merger(pn‚ÇÅ) - œÑ

        # Note: Here again, we don't want to overestimate the time span by too much, but we
        # also don't want to underestimate and get a shortened waveform.  This should be a
        # better estimate, though, because it's dealing with lower speeds, at which PN
        # approximation should be more accurate.
        problem_backwards = remake(
            problem_forwards; tspan=(zero(œÑ), -4œÑ),
            callback=termination_criteria_backwards
        )

        solution_backwards = solve(
            problem_backwards, time_stepper;
            reltol, abstol, force_dtmin,
            solve_kwargs...
        )

        combine_solutions(solution_backwards, solution_forwards)
    else
        solution_forwards
    end
end
