"""
    ùìï(pnsystem)
    gw_energy_flux(pnsystem)

Compute the gravitational-wave energy flux to infinity

The nonspinning flux terms are complete to 4.5pN order, and are given in Eq. (6.11) of
[Blanchet et al. (2023)](https://arxiv.org/abs/2304.11186).

The spin-orbit terms in the flux are now known to 4.0pN.  These terms come from Eq. (4.9) of
[Marsat et al. (2013)](https://arxiv.org/abs/1307.6793v1)

The spin-squared terms (by which we mean both spin-spin and spin-orbit squared terms) in the
flux are known to 3pN order, and given most conveniently in Eq. (4.14) of [Boh√© et al.
(2015)](https://arxiv.org/abs/1501.01529).

Beyond 4.5pN, terms are only known in the extreme-mass-ratio limit.  These terms are given
in Appendix A of [Fujita (2012)](https://arxiv.org/abs/1211.5535v1).  He computed them up to
22pN.  That seems like overkill, so we'll just go up to 6pN.

For systems with matter, the tidal-heating terms come in at relative 5pN order, and are
known partially at 6pN order.  These terms come from Eq. (3.6) of [Vines et al.
(2011)](https://prd.aps.org/abstract/PRD/v83/i8/e084051).  Note their unusual convention for
mass ratios, where ``œá‚ÇÅ = m‚ÇÅ/m`` in their notation; in particular, ``œá`` is not a spin
parameter.  Also note that ``ŒªÃÇ = Œª‚ÇÇ v^{10}/(m‚ÇÅ+m‚ÇÇ)^5``, and we need to add the coupling
terms again with ``1 ‚Üî 2``.  Finally, note the normalization difference, where a different
overall factor is used, leading to a sign difference.
"""
@pn_expression function ùìï(pnsystem)
    32ŒΩ^2/5 * (v/c)^10 * @pn_expansion(
        # Non-spinning terms; Eq. (314) of Blanchet (2014)
        1
        + (v/c)^2 * (-1247//336 - 35ŒΩ/12)
        + (v/c)^3 * (4œÄ)
        + (v/c)^4 * (-44711//9072 + 9271ŒΩ/504 + 65ŒΩ^2/18)
        + (v/c)^5 * ((-8191//672 - 583*ŒΩ/24)œÄ)
        + (v/c)^6 * (
            6643739519//69854400 + 16œÄ^2/3 - 1712*(Œ≥‚Çë+2ln2+ln(v))/105
            + (-134543//7776 + 41œÄ^2/48)ŒΩ - 94403ŒΩ^2/3024 - 775ŒΩ^3/324
        )
        + (v/c)^7 * ((-16285//504 + 214745ŒΩ/1728 + 193385ŒΩ^2/3024)œÄ)
        + (v/c)^8 * (
            - 323105549467//3178375200 + 232597Œ≥‚Çë/4410 - 1369œÄ^2/126
            + 39931ln2/294 - 47385ln3/1568 + 232597ln(v)/4410
            + (
                -1452202403629//1466942400 + 41478Œ≥‚Çë/245 - 267127œÄ^2/4608
                + 479062ln2/2205 + 47385ln3/392 + 41478ln(v)/245
            )ŒΩ
            + (1607125//6804 - 3157œÄ^2/384)ŒΩ^2 + 6875ŒΩ^3/504 + 5ŒΩ^4/6
        )
        + (v/c)^9 * (
            (
                265978667519//745113600 - 6848*(Œ≥‚Çë+2ln2+ln(v))/105
                + (2062241//22176 + 41œÄ^2/12)ŒΩ - 133112905ŒΩ^2/290304 - 3719141ŒΩ^3/38016
            )œÄ
        )

        # Spin-orbit terms; Eq. (4.9) of Marsat et al. (2013)
        + (v/c)^3 * (-4 * s‚Çó - 5Œ¥/4 * œÉ‚Çó)
        + (v/c)^5 * ((-9//2 + 272ŒΩ/9) * s‚Çó + (-13//16 + 43ŒΩ/4)Œ¥ * œÉ‚Çó)
        + (v/c)^6 * ((-16œÄ) * s‚Çó + (-31œÄ/6)Œ¥ * œÉ‚Çó)
        + (v/c)^7 * (
            (476645//6804 + 6172ŒΩ/189 - 2810ŒΩ^2/27) * s‚Çó
            + (9535//336 + 1849ŒΩ/126 - 1501ŒΩ^2/36)Œ¥ * œÉ‚Çó
        )
        + (v/c)^8 * (
            (-3485//96 + 13879ŒΩ/72)œÄ * s‚Çó
            + (-7163//672 + 130583ŒΩ/2016)œÄ*Œ¥ * œÉ‚Çó
        )

        # Spin-squared terms; Eq. (4.14) of Boh√© et al. (2015)
        + (v/c)^4 * (
            s‚Çó^2 * (2Œ∫‚Çä + 4)
            + s‚Çó * œÉ‚Çó * (2Œ¥*Œ∫‚Çä + 4Œ¥ - 2Œ∫‚Çã)
            + œÉ‚Çó^2 * (-Œ¥*Œ∫‚Çã + Œ∫‚Çä + 1//16 + (-2Œ∫‚Çä - 4)ŒΩ)
        )
        + (v/c)^6 * (
            s‚Çó^2 * (41Œ¥*Œ∫‚Çã/16 - 271Œ∫‚Çä/112 - 5239//504 + (-43Œ∫‚Çä/4 - 43//2)ŒΩ)
            + s‚Çó * œÉ‚Çó * (-279Œ¥*Œ∫‚Çä/56 - 817Œ¥/56 + 279Œ∫‚Çã/56 + (-43Œ¥*Œ∫‚Çä/4 - 43Œ¥/2 + Œ∫‚Çã/2)ŒΩ)
            + œÉ‚Çó^2 * (
                279Œ¥*Œ∫‚Çã/112 - 279*Œ∫‚Çä/112 - 25//8
                + (45Œ¥*Œ∫‚Çã/16 + 243Œ∫‚Çä/112 + 344//21)ŒΩ
                + (43Œ∫‚Çä/4 + 43//2)ŒΩ^2
            )
        )

        # Spin-cubed; Eq. (6.19) of Marsat (2014)
        + (v/c)^7 * (
            s‚Çó^3 * (-16Œ∫‚Çä/3 - 4Œª‚Çä + 40//3)
            + s‚Çó^2 * œÉ‚Çó * (-35Œ¥*Œ∫‚Çä/6 - 6Œ¥*Œª‚Çä + 73Œ¥/3 - 3Œ∫‚Çã/4 + 6Œª‚Çã)
            + s‚Çó * œÉ‚Çó^2 * (
                -35Œ¥*Œ∫‚Çã/12 + 6Œ¥*Œª‚Çã + 35Œ∫‚Çä/12 - 6Œª‚Çä + 32//3
                + (22Œ∫‚Çä/3 + 12Œª‚Çä - 172//3)ŒΩ
            )
            + œÉ‚Çó^3 * (
                67Œ¥*Œ∫‚Çä/24 - 2Œ¥*Œª‚Çä - Œ¥/8 - 67Œ∫‚Çã/24 + 2Œª‚Çã
                + (Œ¥*Œ∫‚Çä/2 + 2Œ¥*Œª‚Çä - 11Œ¥ + 61Œ∫‚Çã/12 - 6Œª‚Çã)ŒΩ
            )
        )

        # EMRI terms; Appendix A of Fujita (2012), with lower-order terms removed because
        # they have since been incorporated into non-EMRI terms above
        + (v/c)^10 * (
            - 2500861660823683//2831932303200 - 424223œÄ^2/6804 - 83217611ln2/1122660
            + 916628467Œ≥‚Çë/7858620 + 47385ln3/196 + 916628467ln(v)/7858620
        )
        + (v/c)^11 * (
            - 142155œÄ*ln3/784 + 8399309750401œÄ/101708006400 + 177293Œ≥‚Çë*œÄ/1176
            + 8521283œÄ*ln2/17640 + 177293œÄ*ln(v)/1176
        )
        + (v/c)^12 * (
            - 271272899815409ln2/157329572400
            - 54784œÄ^2*ln2/315 - 246137536815857Œ≥‚Çë/157329572400 - 437114506833ln3/789268480
            - 256œÄ^4/45 - 27392Œ≥‚Çë*œÄ^2/315 - 27392Œ∂3/105 - 37744140625ln5/260941824
            + 1465472Œ≥‚Çë^2/11025 + 5861888Œ≥‚Çë*ln2/11025 + 5861888ln2^2/11025
            + 2067586193789233570693//602387400044430000 + 3803225263œÄ^2/10478160
            + ln(v) * (
                - 246137536815857//157329572400 - 27392œÄ^2/315
                + 2930944Œ≥‚Çë/11025 + 5861888ln2/11025
                + 1465472ln(v)/11025
            )
        )

        # NS tidal heating; Eq. (3.6) [(3.7) on arXiv] of Vines et al. (2011)
        + (v/c)^10 * (
            (18 - 12X‚ÇÅ)Œõ‚ÇÅ * X‚ÇÅ^4
            + (18 - 12X‚ÇÇ)Œõ‚ÇÇ * X‚ÇÇ^4
        )
        + (v/c)^12 * (
            (-704 - 1803X‚ÇÅ + 4501X‚ÇÅ^2 - 2170X‚ÇÅ^3)Œõ‚ÇÅ * X‚ÇÅ^4 / 28
            + (-704 - 1803X‚ÇÇ + 4501X‚ÇÇ^2 - 2170X‚ÇÇ^3)Œõ‚ÇÇ * X‚ÇÇ^4 / 28
        )
    )
end
const gw_energy_flux = ùìï


@pn_expression function ùìï2(pnsystem)
    c = PNExpansionParameter(pnsystem)
    32ŒΩ^2/5 * v^10 * sum(
        # Non-spinning terms; Eq. (314) of Blanchet (2014)
        1
        + (v/c)^2 * (-1247//336 - 35ŒΩ/12)
        + (v/c)^3 * (4œÄ)
        + (v/c)^4 * (-44711//9072 + 9271ŒΩ/504 + 65ŒΩ^2/18)
        + (v/c)^5 * ((-8191//672 - 583*ŒΩ/24)œÄ)
        + (v/c)^6 * (
            6643739519//69854400 + 16œÄ^2/3 - 1712*(Œ≥‚Çë+2ln2+ln(v))/105
            + (-134543//7776 + 41œÄ^2/48)ŒΩ - 94403ŒΩ^2/3024 - 775ŒΩ^3/324
        )
        + (v/c)^7 * ((-16285//504 + 214745ŒΩ/1728 + 193385ŒΩ^2/3024)œÄ)
        + (v/c)^8 * (
            - 323105549467//3178375200 + 232597Œ≥‚Çë/4410 - 1369œÄ^2/126
            + 39931ln2/294 - 47385ln3/1568 + 232597ln(v)/4410
            + (
                -1452202403629//1466942400 + 41478Œ≥‚Çë/245 - 267127œÄ^2/4608
                + 479062ln2/2205 + 47385ln3/392 + 41478ln(v)/245
            )ŒΩ
            + (1607125//6804 - 3157œÄ^2/384)ŒΩ^2 + 6875ŒΩ^3/504 + 5ŒΩ^4/6
        )
        + (v/c)^9 * (
            (
                265978667519//745113600 - 6848*(Œ≥‚Çë+2ln2+ln(v))/105
                + (2062241//22176 + 41œÄ^2/12)ŒΩ - 133112905ŒΩ^2/290304 - 3719141ŒΩ^3/38016
            )œÄ
        )

        # Spin-orbit terms; Eq. (4.9) of Marsat et al. (2013)
        + (v/c)^3 * (-4 * s‚Çó - 5Œ¥/4 * œÉ‚Çó)
        + (v/c)^5 * ((-9//2 + 272ŒΩ/9) * s‚Çó + (-13//16 + 43ŒΩ/4)Œ¥ * œÉ‚Çó)
        + (v/c)^6 * ((-16œÄ) * s‚Çó + (-31œÄ/6)Œ¥ * œÉ‚Çó)
        + (v/c)^7 * (
            (476645//6804 + 6172ŒΩ/189 - 2810ŒΩ^2/27) * s‚Çó
            + (9535//336 + 1849ŒΩ/126 - 1501ŒΩ^2/36)Œ¥ * œÉ‚Çó
        )
        + (v/c)^8 * (
            (-3485//96 + 13879ŒΩ/72)œÄ * s‚Çó
            + (-7163//672 + 130583ŒΩ/2016)œÄ*Œ¥ * œÉ‚Çó
        )

        # Spin-squared terms; Eq. (4.14) of Boh√© et al. (2015)
        + (v/c)^4 * (
            s‚Çó^2 * (2Œ∫‚Çä + 4)
            + s‚Çó * œÉ‚Çó * (2Œ¥*Œ∫‚Çä + 4Œ¥ - 2Œ∫‚Çã)
            + œÉ‚Çó^2 * (-Œ¥*Œ∫‚Çã + Œ∫‚Çä + 1//16 + (-2Œ∫‚Çä - 4)ŒΩ)
        )
        + (v/c)^6 * (
            s‚Çó^2 * (41Œ¥*Œ∫‚Çã/16 - 271Œ∫‚Çä/112 - 5239//504 + (-43Œ∫‚Çä/4 - 43//2)ŒΩ)
            + s‚Çó * œÉ‚Çó * (-279Œ¥*Œ∫‚Çä/56 - 817Œ¥/56 + 279Œ∫‚Çã/56 + (-43Œ¥*Œ∫‚Çä/4 - 43Œ¥/2 + Œ∫‚Çã/2)ŒΩ)
            + œÉ‚Çó^2 * (
                279Œ¥*Œ∫‚Çã/112 - 279*Œ∫‚Çä/112 - 25//8
                + (45Œ¥*Œ∫‚Çã/16 + 243Œ∫‚Çä/112 + 344//21)ŒΩ
                + (43Œ∫‚Çä/4 + 43//2)ŒΩ^2
            )
        )

        # Spin-cubed; Eq. (6.19) of Marsat (2014)
        + (v/c)^7 * (
            s‚Çó^3 * (-16Œ∫‚Çä/3 - 4Œª‚Çä + 40//3)
            + s‚Çó^2 * œÉ‚Çó * (-35Œ¥*Œ∫‚Çä/6 - 6Œ¥*Œª‚Çä + 73Œ¥/3 - 3Œ∫‚Çã/4 + 6Œª‚Çã)
            + s‚Çó * œÉ‚Çó^2 * (
                -35Œ¥*Œ∫‚Çã/12 + 6Œ¥*Œª‚Çã + 35Œ∫‚Çä/12 - 6Œª‚Çä + 32//3
                + (22Œ∫‚Çä/3 + 12Œª‚Çä - 172//3)ŒΩ
            )
            + œÉ‚Çó^3 * (
                67Œ¥*Œ∫‚Çä/24 - 2Œ¥*Œª‚Çä - Œ¥/8 - 67Œ∫‚Çã/24 + 2Œª‚Çã
                + (Œ¥*Œ∫‚Çä/2 + 2Œ¥*Œª‚Çä - 11Œ¥ + 61Œ∫‚Çã/12 - 6Œª‚Çã)ŒΩ
            )
        )

        # EMRI terms; Appendix A of Fujita (2012), with lower-order terms removed because
        # they have since been incorporated into non-EMRI terms above
        + (v/c)^10 * (
            - 2500861660823683//2831932303200 - 424223œÄ^2/6804 - 83217611ln2/1122660
            + 916628467Œ≥‚Çë/7858620 + 47385ln3/196 + 916628467ln(v)/7858620
        )
        + (v/c)^11 * (
            - 142155œÄ*ln3/784 + 8399309750401œÄ/101708006400 + 177293Œ≥‚Çë*œÄ/1176
            + 8521283œÄ*ln2/17640 + 177293œÄ*ln(v)/1176
        )
        + (v/c)^12 * (
            - 271272899815409ln2/157329572400
            - 54784œÄ^2*ln2/315 - 246137536815857Œ≥‚Çë/157329572400 - 437114506833ln3/789268480
            - 256œÄ^4/45 - 27392Œ≥‚Çë*œÄ^2/315 - 27392Œ∂3/105 - 37744140625ln5/260941824
            + 1465472Œ≥‚Çë^2/11025 + 5861888Œ≥‚Çë*ln2/11025 + 5861888ln2^2/11025
            + 2067586193789233570693//602387400044430000 + 3803225263œÄ^2/10478160
            + ln(v) * (
                - 246137536815857//157329572400 - 27392œÄ^2/315
                + 2930944Œ≥‚Çë/11025 + 5861888ln2/11025
                + 1465472ln(v)/11025
            )
        )

        # NS tidal heating; Eq. (3.6) [(3.7) on arXiv] of Vines et al. (2011)
        + (v/c)^10 * (
            (18 - 12X‚ÇÅ)Œõ‚ÇÅ * X‚ÇÅ^4
            + (18 - 12X‚ÇÇ)Œõ‚ÇÇ * X‚ÇÇ^4
        )
        + (v/c)^12 * (
            (-704 - 1803X‚ÇÅ + 4501X‚ÇÅ^2 - 2170X‚ÇÅ^3)Œõ‚ÇÅ * X‚ÇÅ^4 / 28
            + (-704 - 1803X‚ÇÇ + 4501X‚ÇÇ^2 - 2170X‚ÇÇ^3)Œõ‚ÇÇ * X‚ÇÇ^4 / 28
        )
    )
end


@generated function ùìï3(pnsystem::PNSystem{ST, PNOrder}) where {ST, PNOrder}
    # Create a `PNSystem` with `FastDifferentiation` (henceforth FD) variables, using the
    # same PNOrder as the input `pnsystem`.
    fdpnsystem = FDPNSystem(eltype(ST), PNOrder)

    # FD expects a single vector of variables, so we concatenate the state vector with the
    # two tidal-coupling parameters
    vars = FastDifferentiation.Node[fdpnsystem.state; Œõ‚ÇÅ(fdpnsystem); Œõ‚ÇÇ(fdpnsystem)]

    # Now we evaluate ùìï using the FD variables.  This will expand all derived variables in
    # terms of the fundamental variables, but FD will take care of evaluating those
    # efficiently via common subexpression elimination (CSE).
    ùìïformula = ùìï(fdpnsystem)

    # Here, ùìï is a tree (or DAG) with lots of FD expressions (Nodes), so we want to make a
    # function out of it.  We choose `in_place=true` to avoid allocating memory and FD's
    # attempts to convert to `Float64`.
    ùìïfunc = FastDifferentiation.make_function([ùìïformula], vars, in_place=true)

    # Unfortunately, FD produces a function with signature `function (result, vars)`, where
    # `result` is an array of the same type as `vars`, and `vars` is as given above.  We
    # want a function with signature `function (pnsystem)`, so we need to massage `ùìïfunc`
    # into that form.  Here, we get the actual `Expr` from which the function is built.
    ùìïexpr = RuntimeGeneratedFunctions.get_expression(ùìïfunc)

    # Now, we use `MacroTools` to get the body of the function.
    ùìïbody = MacroTools.unblock(MacroTools.splitdef(ùìïexpr)[:body])

    # At this point, the function is just a long series of statements inside an `@inbounds`
    # block, which we will want later, but first we need to extract them.
    MacroTools.@capture(ùìïbody, @inbounds begin ùìïstatements__ end) ||
        throw(ArgumentError(
            "\n    No @inbounds block found in ùìï expression." *
            "\n    Something may have changed in FastDifferentiation." *
            "\n    Open an issue citing this PNSystem:" *
            "\n    $pnsystem"
        ))

    # The ùìïstatements are mostly what we want, except that FD makes the second-to-last
    # line set element 1 of the result array to the desired result; we just want to return
    # the desired result, so we get that right-hand side here.  Also note that the last line
    # is just `return nothing`, so we never use `ùìïstatements[end]`.
    MacroTools.@capture(ùìïstatements[end-1], _ = ùìïreturn_) ||
        throw(ArgumentError(
            "\n    No return statement found in ùìï expression." *
            "\n    Something may have changed in FastDifferentiation." *
            "\n    Open an issue citing this PNSystem:" *
            "\n    $pnsystem"
        ))

    # Finally, we build the expression we want to return, constructing the required input
    # variables from `pnsystem`, reinstating the `@inbounds` block and adding `@fastmath`,
    # and otherwise just reusing the statements and return from the FD-generated function.
    return quote
        input_variables = SVector(pnsystem)
        @fastmath @inbounds begin
            $(ùìïstatements[1:end-2]...)
        end
        return $(ùìïreturn)
    end
end
