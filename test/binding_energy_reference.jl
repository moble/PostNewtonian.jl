"""

This file creates a very explicit binding energy function for a Post-Newtonian system.  It
largely duplicates the contents of the package's actual `binding_energy ‚â° ùìî` function, but
in a way that doesn't rely on macro fanciness or the PNTerm trickery.  This is useful for
testing the package's actual `binding_energy` function, as well as the validity of the
macro and PNTerm stuff.

Once the interface is finished, this could be done more elegantly with `@testsetup` from the
`TestItems` package.

"""

using PostNewtonian: a‚ÇÜ·∂ú¬π, a‚ÇÜ‚ÇÖ·∂ú¬π, a‚ÇáÀ°‚Åø¬π, a‚Çá·∂ú¬π
function be(pnsystem, deriv)
    let M‚ÇÅ = PostNewtonian.M‚ÇÅ(pnsystem),
        M‚ÇÇ = PostNewtonian.M‚ÇÇ(pnsystem),
        v = PostNewtonian.v(pnsystem),
        Œõ‚ÇÅ = PostNewtonian.Œõ‚ÇÅ(pnsystem),
        Œõ‚ÇÇ = PostNewtonian.Œõ‚ÇÇ(pnsystem),
        X‚ÇÅ = PostNewtonian.X‚ÇÅ(pnsystem),
        X‚ÇÇ = PostNewtonian.X‚ÇÇ(pnsystem),
        M = PostNewtonian.M(pnsystem),
        s‚Çó = PostNewtonian.s‚Çó(pnsystem),
        Œ¥ = PostNewtonian.Œ¥(pnsystem),
        Œº = PostNewtonian.Œº(pnsystem),
        ŒΩ = PostNewtonian.ŒΩ(pnsystem),
        œÉ‚Çó = PostNewtonian.œÉ‚Çó(pnsystem),
        œá‚ÇÅ¬≤ = PostNewtonian.œá‚ÇÅ¬≤(pnsystem),
        œá‚ÇÅ‚ÇÇ = PostNewtonian.œá‚ÇÅ‚ÇÇ(pnsystem),
        œá‚ÇÇ¬≤ = PostNewtonian.œá‚ÇÇ¬≤(pnsystem),
        œá‚Çê‚Çó = PostNewtonian.œá‚Çê‚Çó(pnsystem),
        œá‚Çõ‚Çó = PostNewtonian.œá‚Çõ‚Çó(pnsystem),
        Œ∫‚Çä = PostNewtonian.Œ∫‚Çä(pnsystem),
        Œ∫‚Çã = PostNewtonian.Œ∫‚Çã(pnsystem),
        Œª‚Çä = PostNewtonian.Œª‚Çä(pnsystem),
        Œª‚Çã = PostNewtonian.Œª‚Çã(pnsystem),
        œÄ = PostNewtonian.type_converter(pnsystem, œÄ),
        ln2 = PostNewtonian.type_converter(pnsystem, PostNewtonian.ln2),
        ln3 = PostNewtonian.type_converter(pnsystem, PostNewtonian.ln3),
        Œ≥‚Çë = PostNewtonian.type_converter(pnsystem, PostNewtonian.Œ≥‚Çë),
        ln = (x -> log(PostNewtonian.type_converter(pnsystem, x))),
        pn_order = PostNewtonian.pn_order(pnsystem)

        e = Dict()
        eÀ°‚Åø = Dict()

        c = -1//2 * Œº  # NOTE: Included v^2 factor inside sum for easier differentiation
        e[0] = 1
        e[2] = (-ŒΩ / 12 - 3//4)
        e[4] = (-ŒΩ^2 / 24 + 19ŒΩ / 8 - 27//8)
        e[6] = (-35ŒΩ^3 / 5184 - 155ŒΩ^2 / 96 + (34445//576 - 205œÄ^2 / 96)ŒΩ - 675//64)
        e[8] = (
            -3969//128 +
            77ŒΩ^4 / 31104 +
            301ŒΩ^3 / 1728 +
            (-498449//3456 + 3157œÄ^2 / 576)ŒΩ^2 +
            (-123671//5760 + 1792ln2 / 15 + 9037œÄ^2 / 1536 + 896Œ≥‚Çë / 15)ŒΩ
        )
        eÀ°‚Åø[8] = (448ŒΩ / 15)

        # Below are the incomplete terms from Eq. (74) of https://arxiv.org/abs/1312.2503v2
        e[10] = (
            -45927//512 +
            ŒΩ^5 / 512 +
            55ŒΩ^4 / 512 +
            (-1353œÄ^2 / 256 + 69423//512)ŒΩ^3 +
            (-21337œÄ^2 / 1024 + 3a‚ÇÜ·∂ú¬π - 896ln2 / 5 - 448Œ≥‚Çë / 5 + 893429//2880)ŒΩ^2 +
            (
                -228916843//115200 - 9976Œ≥‚Çë / 35 + 729ln3 / 7 - 23672ln2 / 35 +
                126779œÄ^2 / 512
            )ŒΩ
        )
        eÀ°‚Åø[10] = (-4988ŒΩ / 35 - 656ŒΩ^2 / 5)
        e[11] = (10ŒΩ / 3 * (13696œÄ / 525 + ŒΩ * a‚ÇÜ‚ÇÖ·∂ú¬π))
        e[12] = (
            -264627//1024 +
            2717ŒΩ^6 / 6718464 +
            5159ŒΩ^5 / 248832 +
            (272855œÄ^2 / 124416 - 20543435//373248)ŒΩ^4 +
            (
                1232Œ≥‚Çë / 27 + 6634243œÄ^2 / 110592 - 11a‚ÇÜ·∂ú¬π / 2 - 71700787//51840 +
                2464ln2 / 27
            )ŒΩ^3 +
            (
                113176680983//14515200 +
                18491œÄ^4 / 2304 +
                246004ln2 / 105 +
                112772Œ≥‚Çë / 105 +
                a‚ÇÜ·∂ú¬π * 11//2 +
                a‚ÇáÀ°‚Åø¬π * 2//3 +
                a‚Çá·∂ú¬π * 11//3 - 86017789œÄ^2 / 110592 - 2673ln3 / 14
            )ŒΩ^2 +
            (
                -389727504721//43545600 + 74888ln2 / 243 - 7128ln3 / 7 -
                30809603œÄ^4 / 786432 - 3934568Œ≥‚Çë / 8505 + 9118627045œÄ^2 / 5308416
            )ŒΩ
        )
        eÀ°‚Åø[12] = (-1967284ŒΩ / 8505 + 24464ŒΩ^3 / 135 + (39754//105 + a‚ÇáÀ°‚Åø¬π * 11//3)ŒΩ^2)

        # Spin-orbit
        e[3] = (14s‚Çó / 3 + 2Œ¥ * œÉ‚Çó)
        e[5] = ((11 - 61ŒΩ / 9) * s‚Çó + Œ¥ * (3 - 10ŒΩ / 3) * œÉ‚Çó)
        e[7] = ((135//4 - 367ŒΩ / 4 + 29ŒΩ^2 / 12) * s‚Çó + Œ¥ * (27//4 - 39ŒΩ + 5ŒΩ^2 / 4) * œÉ‚Çó)

        # Spin-squared
        e[4] += (
            s‚Çó^2 * (-Œ∫‚Çä - 2) +
            s‚Çó * œÉ‚Çó * (-Œ¥ * Œ∫‚Çä - 2Œ¥ + Œ∫‚Çã) +
            œÉ‚Çó^2 * (Œ¥ * Œ∫‚Çã / 2 - Œ∫‚Çä / 2 + (Œ∫‚Çä + 2)ŒΩ)
        )
        e[6] += (
            s‚Çó^2 * (-5Œ¥ * Œ∫‚Çã / 3 - 25 * Œ∫‚Çä / 6 + 50//9 + (5Œ∫‚Çä / 6 + 5//3)ŒΩ) +
            s‚Çó *
            œÉ‚Çó *
            (-5 * Œ¥ * Œ∫‚Çä / 2 + 25 * Œ¥ / 3 + 5Œ∫‚Çã / 2 + (5Œ¥ * Œ∫‚Çä / 6 + 5Œ¥ / 3 + 35Œ∫‚Çã / 6)ŒΩ) +
            œÉ‚Çó^2 * (
                5Œ¥ * Œ∫‚Çã / 4 - 5Œ∫‚Çä / 4 +
                5 +
                (5Œ¥ * Œ∫‚Çã / 4 + 5Œ∫‚Çä / 4 - 10)ŒΩ +
                (-5Œ∫‚Çä / 6 - 5//3)ŒΩ^2
            )
        )

        # Spin-cubed
        e[7] += (
            s‚Çó^3 * (2Œ∫‚Çä + 4Œª‚Çä - 20) +
            s‚Çó^2 * œÉ‚Çó * (2Œ¥ * Œ∫‚Çä + 6Œ¥ * Œª‚Çä - 32Œ¥ + 4Œ∫‚Çã - 6Œª‚Çã) +
            s‚Çó * œÉ‚Çó^2 * (5Œ¥ * Œ∫‚Çã - 6Œ¥ * Œª‚Çã - 5Œ∫‚Çä + 6Œª‚Çä - 12 + (-2Œ∫‚Çä - 12Œª‚Çä + 68)ŒΩ) +
            œÉ‚Çó^3 * (-3Œ¥ * Œ∫‚Çä + 2Œ¥ * Œª‚Çä + 3Œ∫‚Çã - 2Œª‚Çã + (-2Œ¥ * Œª‚Çä + 12Œ¥ - 6Œ∫‚Çã + 6Œª‚Çã)ŒΩ)
        )

        # NS tidal coupling
        e[10] += -9 * (Œõ‚ÇÅ * X‚ÇÅ^3 + Œõ‚ÇÇ * X‚ÇÇ^3)ŒΩ
        e[12] += -11//2 * ((3 + 2X‚ÇÅ + 3X‚ÇÅ^2)Œõ‚ÇÅ * X‚ÇÅ^3 + (3 + 2X‚ÇÇ + 3X‚ÇÇ^2)Œõ‚ÇÇ * X‚ÇÇ^3)ŒΩ

        if deriv
            c *
            v *
            (
                sum(v^(k) * coeff * (k + 2) for (k, coeff) ‚àà e if k ‚â§ 2pn_order; init=0) +
                sum(
                    v^(k) * coeff * 2 * ((k + 2) * log(v) + 1) for
                    (k, coeff) ‚àà eÀ°‚Åø if k ‚â§ 2pn_order;
                    init=0,
                )
            )
        else
            c *
            v^2 *
            (
                sum(v^(k) * coeff for (k, coeff) ‚àà e if k ‚â§ 2pn_order; init=0) +
                sum(v^(k) * coeff * 2log(v) for (k, coeff) ‚àà eÀ°‚Åø if k ‚â§ 2pn_order; init=0)
            )
        end
    end
end
